{"ast":null,"code":"import { ImageCell, PriceCell, DescriptionCell, DiscountCell, AvailabilityCell, RatingCell, SizeCell, WeightCell, CategoryCell, DefaultCell } from './cells';\nexport default {\n  name: 'TableCell',\n  components: {\n    ImageCell,\n    PriceCell,\n    DescriptionCell,\n    DiscountCell,\n    AvailabilityCell,\n    RatingCell,\n    SizeCell,\n    WeightCell,\n    CategoryCell,\n    DefaultCell\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'default'\n    },\n    value: {\n      type: [String, Number, Object],\n      default: ''\n    },\n    alt: {\n      type: String,\n      default: ''\n    },\n    comment: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    componentName() {\n      const components = {\n        image: 'ImageCell',\n        description: 'DescriptionCell',\n        price: 'PriceCell',\n        discount: 'DiscountCell',\n        availability: 'AvailabilityCell',\n        rating: 'RatingCell',\n        size: 'SizeCell',\n        weight: 'WeightCell',\n        category: 'CategoryCell'\n      };\n      return components[this.type] || 'DefaultCell';\n    },\n    cellProps() {\n      const baseProps = {\n        value: this.value\n      };\n      if (this.type === 'image') {\n        return {\n          ...baseProps,\n          alt: this.alt\n        };\n      }\n      if (this.type === 'rating') {\n        return {\n          ...baseProps,\n          comment: this.comment\n        };\n      }\n      return baseProps;\n    }\n  }\n};","map":{"version":3,"names":["ImageCell","PriceCell","DescriptionCell","DiscountCell","AvailabilityCell","RatingCell","SizeCell","WeightCell","CategoryCell","DefaultCell","name","components","props","type","String","default","value","Number","Object","alt","comment","computed","componentName","image","description","price","discount","availability","rating","size","weight","category","cellProps","baseProps"],"sources":["src/components/atoms/TableCell.vue"],"sourcesContent":["<template>\n  <div class=\"table-cell\">\n    <component :is=\"componentName\" v-bind=\"cellProps\" />\n  </div>\n</template>\n\n<script>\nimport {\n  ImageCell,\n  PriceCell,\n  DescriptionCell,\n  DiscountCell,\n  AvailabilityCell,\n  RatingCell,\n  SizeCell,\n  WeightCell,\n  CategoryCell,\n  DefaultCell\n} from './cells'\n\nexport default {\n  name: 'TableCell',\n  components: {\n    ImageCell,\n    PriceCell,\n    DescriptionCell,\n    DiscountCell,\n    AvailabilityCell,\n    RatingCell,\n    SizeCell,\n    WeightCell,\n    CategoryCell,\n    DefaultCell\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'default'\n    },\n    value: {\n      type: [String, Number, Object],\n      default: ''\n    },\n    alt: {\n      type: String,\n      default: ''\n    },\n    comment: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    componentName() {\n      const components = {\n        image: 'ImageCell',\n        description: 'DescriptionCell',\n        price: 'PriceCell',\n        discount: 'DiscountCell',\n        availability: 'AvailabilityCell',\n        rating: 'RatingCell',\n        size: 'SizeCell',\n        weight: 'WeightCell',\n        category: 'CategoryCell'\n      }\n      return components[this.type] || 'DefaultCell'\n    },\n    cellProps() {\n      const baseProps = { value: this.value }\n      \n      if (this.type === 'image') {\n        return { ...baseProps, alt: this.alt }\n      }\n      \n      if (this.type === 'rating') {\n        return { ...baseProps, comment: this.comment }\n      }\n      \n      return baseProps\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.table-cell {\n  vertical-align: middle;\n  word-break: break-word;\n}\n\n.image-cell {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n\n.text-cell {\n  max-width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.description-cell {\n  max-width: 300px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.price-cell {\n  font-weight: 600;\n  color: #059669;\n}\n\n.rating-cell {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.availability-cell {\n  padding: 4px 8px;\n  border-radius: 4px;\n  font-size: 12px;\n  font-weight: 500;\n  text-align: center;\n}\n\n.available {\n  background-color: #d1fae5;\n  color: #065f46;\n}\n\n.unavailable {\n  background-color: #fee2e2;\n  color: #991b1b;\n}\n</style>\n"],"mappings":"AAOA,SACAA,SAAA,EACAC,SAAA,EACAC,eAAA,EACAC,YAAA,EACAC,gBAAA,EACAC,UAAA,EACAC,QAAA,EACAC,UAAA,EACAC,YAAA,EACAC,WAAA,QACA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAX,SAAA;IACAC,SAAA;IACAC,eAAA;IACAC,YAAA;IACAC,gBAAA;IACAC,UAAA;IACAC,QAAA;IACAC,UAAA;IACAC,YAAA;IACAC;EACA;EACAG,KAAA;IACAC,IAAA;MACAA,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,KAAA;MACAH,IAAA,GAAAC,MAAA,EAAAG,MAAA,EAAAC,MAAA;MACAH,OAAA;IACA;IACAI,GAAA;MACAN,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAK,OAAA;MACAP,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAM,QAAA;IACAC,cAAA;MACA,MAAAX,UAAA;QACAY,KAAA;QACAC,WAAA;QACAC,KAAA;QACAC,QAAA;QACAC,YAAA;QACAC,MAAA;QACAC,IAAA;QACAC,MAAA;QACAC,QAAA;MACA;MACA,OAAApB,UAAA,MAAAE,IAAA;IACA;IACAmB,UAAA;MACA,MAAAC,SAAA;QAAAjB,KAAA,OAAAA;MAAA;MAEA,SAAAH,IAAA;QACA;UAAA,GAAAoB,SAAA;UAAAd,GAAA,OAAAA;QAAA;MACA;MAEA,SAAAN,IAAA;QACA;UAAA,GAAAoB,SAAA;UAAAb,OAAA,OAAAA;QAAA;MACA;MAEA,OAAAa,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}