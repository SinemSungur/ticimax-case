{"ast":null,"code":"import axios from 'axios';\nimport { API_CONFIG, ERROR_MESSAGES, SORT_DIRECTIONS, DEFAULT_VALUES } from '@/constants/content';\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalPages: 0,\n  totalItems: 0,\n  currentPage: DEFAULT_VALUES.DEFAULT_PAGE,\n  itemsPerPage: DEFAULT_VALUES.ITEMS_PER_PAGE\n};\nconst getters = {\n  sortedProducts: state => {\n    return [...state.products];\n  },\n  totalItems: state => state.totalItems\n};\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  },\n  SET_TOTAL_PAGES(state, totalPages) {\n    state.totalPages = totalPages;\n  },\n  SET_TOTAL_ITEMS(state, totalItems) {\n    state.totalItems = totalItems;\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page;\n  }\n};\nconst actions = {\n  async fetchProducts({\n    commit,\n    state\n  }, {\n    page = DEFAULT_VALUES.DEFAULT_PAGE,\n    sort = ''\n  } = {}) {\n    commit('SET_LOADING', true);\n    commit('SET_ERROR', null);\n    try {\n      // Calculate pagination parameters\n      const limit = state.itemsPerPage;\n      const skip = (page - 1) * limit;\n\n      // Fetch products from API\n      const response = await axios.get(`${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`);\n      const products = response.data.products || [];\n\n      // Apply sorting only if sort is specified\n      if (sort === SORT_DIRECTIONS.ASC) {\n        products.sort((a, b) => a.price - b.price);\n      } else if (sort === SORT_DIRECTIONS.DESC) {\n        products.sort((a, b) => b.price - a.price);\n      }\n      // If sort is empty string, keep API order\n\n      // Calculate total pages\n      const totalProducts = response.data.total || products.length;\n      const totalPages = Math.ceil(totalProducts / limit);\n      commit('SET_PRODUCTS', products);\n      commit('SET_TOTAL_PAGES', totalPages);\n      commit('SET_TOTAL_ITEMS', totalProducts);\n      commit('SET_CURRENT_PAGE', page);\n    } catch (error) {\n      commit('SET_ERROR', ERROR_MESSAGES.FETCH_PRODUCTS_ERROR);\n      commit('SET_PRODUCTS', []);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","API_CONFIG","ERROR_MESSAGES","SORT_DIRECTIONS","DEFAULT_VALUES","state","products","loading","error","totalPages","totalItems","currentPage","DEFAULT_PAGE","itemsPerPage","ITEMS_PER_PAGE","getters","sortedProducts","mutations","SET_PRODUCTS","SET_LOADING","SET_ERROR","SET_TOTAL_PAGES","SET_TOTAL_ITEMS","SET_CURRENT_PAGE","page","actions","fetchProducts","commit","sort","limit","skip","response","get","BASE_URL","data","ASC","a","b","price","DESC","totalProducts","total","length","Math","ceil","FETCH_PRODUCTS_ERROR","namespaced"],"sources":["/Users/sinem.sungur/Downloads/ticimax-case/src/store/modules/products.js"],"sourcesContent":["import axios from 'axios'\nimport {\n  API_CONFIG,\n  ERROR_MESSAGES,\n  SORT_DIRECTIONS,\n  DEFAULT_VALUES\n} from '@/constants/content'\n\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalPages: 0,\n  totalItems: 0,\n  currentPage: DEFAULT_VALUES.DEFAULT_PAGE,\n  itemsPerPage: DEFAULT_VALUES.ITEMS_PER_PAGE\n}\n\nconst getters = {\n  sortedProducts: (state) => {\n    return [...state.products]\n  },\n  totalItems: (state) => state.totalItems\n}\n\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  },\n  SET_TOTAL_PAGES(state, totalPages) {\n    state.totalPages = totalPages\n  },\n  SET_TOTAL_ITEMS(state, totalItems) {\n    state.totalItems = totalItems\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page\n  }\n}\n\nconst actions = {\n  async fetchProducts({ commit, state }, { page = DEFAULT_VALUES.DEFAULT_PAGE, sort = '' } = {}) {\n    commit('SET_LOADING', true)\n    commit('SET_ERROR', null)\n\n    try {\n      // Calculate pagination parameters\n      const limit = state.itemsPerPage\n      const skip = (page - 1) * limit\n\n      // Fetch products from API\n      const response = await axios.get(`${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`)\n\n      const products = response.data.products || []\n\n      // Apply sorting only if sort is specified\n      if (sort === SORT_DIRECTIONS.ASC) {\n        products.sort((a, b) => a.price - b.price)\n      } else if (sort === SORT_DIRECTIONS.DESC) {\n        products.sort((a, b) => b.price - a.price)\n      }\n      // If sort is empty string, keep API order\n\n      // Calculate total pages\n      const totalProducts = response.data.total || products.length\n      const totalPages = Math.ceil(totalProducts / limit)\n\n      commit('SET_PRODUCTS', products)\n      commit('SET_TOTAL_PAGES', totalPages)\n      commit('SET_TOTAL_ITEMS', totalProducts)\n      commit('SET_CURRENT_PAGE', page)\n    } catch (error) {\n      commit('SET_ERROR', ERROR_MESSAGES.FETCH_PRODUCTS_ERROR)\n      commit('SET_PRODUCTS', [])\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}