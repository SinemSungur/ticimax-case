{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions } from 'vuex';\nimport { ProductListTemplate, ProductControls, ProductGrid } from '@/components';\nexport default {\n  name: 'ProductList',\n  components: {\n    ProductListTemplate,\n    ProductControls,\n    ProductGrid\n  },\n  data() {\n    return {\n      currentPage: 1,\n      currentSort: 'asc'\n    };\n  },\n  computed: {\n    ...mapState('products', ['products', 'loading', 'error', 'totalPages'])\n  },\n  watch: {\n    '$route.query': {\n      handler(newQuery) {\n        this.updateFromQuery(newQuery);\n      },\n      immediate: true\n    }\n  },\n  mounted() {\n    this.fetchProducts({\n      page: this.currentPage,\n      sort: this.currentSort\n    });\n  },\n  methods: {\n    ...mapActions('products', ['fetchProducts']),\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.updateQuery();\n      this.fetchProducts({\n        page: this.currentPage,\n        sort: this.currentSort\n      });\n    },\n    handleSortChange(sort) {\n      this.currentSort = sort;\n      this.currentPage = 1; // Reset to first page when sorting changes\n      this.updateQuery();\n      this.fetchProducts({\n        page: this.currentPage,\n        sort: this.currentSort\n      });\n    },\n    updateFromQuery(query) {\n      if (query.page) {\n        this.currentPage = parseInt(query.page);\n      }\n      if (query.sort) {\n        this.currentSort = query.sort;\n      }\n    },\n    updateQuery() {\n      const query = {\n        page: this.currentPage,\n        sort: this.currentSort\n      };\n      this.$router.push({\n        query: query\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","ProductListTemplate","ProductControls","ProductGrid","name","components","data","currentPage","currentSort","computed","watch","handler","newQuery","updateFromQuery","immediate","mounted","fetchProducts","page","sort","methods","handlePageChange","updateQuery","handleSortChange","query","parseInt","$router","push","catch"],"sources":["src/pages/ProductList.vue"],"sourcesContent":["<template>\n  <div class=\"product-list\">\n    <ProductListTemplate>\n      <template #controls>\n        <ProductControls \n          :current-page=\"currentPage\"\n          :total-pages=\"totalPages\"\n          :current-sort=\"currentSort\"\n        />\n      </template>\n      \n      <template #content>\n        <ProductGrid \n          :products=\"products\"\n          :loading=\"loading\"\n          :error=\"error\"\n          :current-page=\"currentPage\"\n          :total-pages=\"totalPages\"\n          :current-sort=\"currentSort\"\n          @retry=\"fetchProducts\"\n          @page-change=\"handlePageChange\"\n          @sort-change=\"handleSortChange\"\n        />\n      </template>\n    </ProductListTemplate>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nimport { ProductListTemplate, ProductControls, ProductGrid } from '@/components'\n\nexport default {\n  name: 'ProductList',\n  components: {\n    ProductListTemplate,\n    ProductControls,\n    ProductGrid\n  },\n  data() {\n    return {\n      currentPage: 1,\n      currentSort: 'asc'\n    }\n  },\n  computed: {\n    ...mapState('products', ['products', 'loading', 'error', 'totalPages'])\n  },\n  watch: {\n    '$route.query': {\n      handler(newQuery) {\n        this.updateFromQuery(newQuery)\n      },\n      immediate: true\n    }\n  },\n  mounted() {\n    this.fetchProducts({\n      page: this.currentPage,\n      sort: this.currentSort\n    })\n  },\n  methods: {\n    ...mapActions('products', ['fetchProducts']),\n    \n    handlePageChange(page) {\n      this.currentPage = page\n      this.updateQuery()\n      this.fetchProducts({\n        page: this.currentPage,\n        sort: this.currentSort\n      })\n    },\n    \n    handleSortChange(sort) {\n      this.currentSort = sort\n      this.currentPage = 1 // Reset to first page when sorting changes\n      this.updateQuery()\n      this.fetchProducts({\n        page: this.currentPage,\n        sort: this.currentSort\n      })\n    },\n    \n    updateFromQuery(query) {\n      if (query.page) {\n        this.currentPage = parseInt(query.page)\n      }\n      if (query.sort) {\n        this.currentSort = query.sort\n      }\n    },\n    \n    updateQuery() {\n      const query = {\n        page: this.currentPage,\n        sort: this.currentSort\n      }\n      \n      this.$router.push({\n        query: query\n      }).catch(() => {})\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.product-list {\n  min-height: 100vh;\n  background-color: #f8f9fa;\n}\n</style> "],"mappings":";AA6BA,SAAAA,QAAA,EAAAC,UAAA;AACA,SAAAC,mBAAA,EAAAC,eAAA,EAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAJ,mBAAA;IACAC,eAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,WAAA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAV,QAAA;EACA;EACAW,KAAA;IACA;MACAC,QAAAC,QAAA;QACA,KAAAC,eAAA,CAAAD,QAAA;MACA;MACAE,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;MACAC,IAAA,OAAAV,WAAA;MACAW,IAAA,OAAAV;IACA;EACA;EACAW,OAAA;IACA,GAAAnB,UAAA;IAEAoB,iBAAAH,IAAA;MACA,KAAAV,WAAA,GAAAU,IAAA;MACA,KAAAI,WAAA;MACA,KAAAL,aAAA;QACAC,IAAA,OAAAV,WAAA;QACAW,IAAA,OAAAV;MACA;IACA;IAEAc,iBAAAJ,IAAA;MACA,KAAAV,WAAA,GAAAU,IAAA;MACA,KAAAX,WAAA;MACA,KAAAc,WAAA;MACA,KAAAL,aAAA;QACAC,IAAA,OAAAV,WAAA;QACAW,IAAA,OAAAV;MACA;IACA;IAEAK,gBAAAU,KAAA;MACA,IAAAA,KAAA,CAAAN,IAAA;QACA,KAAAV,WAAA,GAAAiB,QAAA,CAAAD,KAAA,CAAAN,IAAA;MACA;MACA,IAAAM,KAAA,CAAAL,IAAA;QACA,KAAAV,WAAA,GAAAe,KAAA,CAAAL,IAAA;MACA;IACA;IAEAG,YAAA;MACA,MAAAE,KAAA;QACAN,IAAA,OAAAV,WAAA;QACAW,IAAA,OAAAV;MACA;MAEA,KAAAiB,OAAA,CAAAC,IAAA;QACAH,KAAA,EAAAA;MACA,GAAAI,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}