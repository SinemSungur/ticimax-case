{"ast":null,"code":"import axios from 'axios';\nimport { API_CONFIG, ERROR_MESSAGES, SORT_DIRECTIONS, DEFAULT_VALUES } from '@/constants/content';\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalPages: 0,\n  currentPage: DEFAULT_VALUES.DEFAULT_PAGE,\n  itemsPerPage: DEFAULT_VALUES.ITEMS_PER_PAGE\n};\nconst getters = {\n  sortedProducts: state => {\n    return [...state.products].sort((a, b) => {\n      return a.price - b.price;\n    });\n  }\n};\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  },\n  SET_TOTAL_PAGES(state, totalPages) {\n    state.totalPages = totalPages;\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page;\n  }\n};\nconst actions = {\n  async fetchProducts({\n    commit,\n    state\n  }, {\n    page = DEFAULT_VALUES.DEFAULT_PAGE,\n    sort = SORT_DIRECTIONS.ASC\n  } = {}) {\n    commit('SET_LOADING', true);\n    commit('SET_ERROR', null);\n    try {\n      // Calculate pagination parameters\n      const limit = state.itemsPerPage;\n      const skip = (page - 1) * limit;\n\n      // Fetch products from API\n      const response = await axios.get(`${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`);\n      let products = [];\n\n      // Apply sorting\n      if (sort === SORT_DIRECTIONS.ASC) {\n        products.sort((a, b) => a.price - b.price);\n      } else if (sort === SORT_DIRECTIONS.DESC) {\n        products.sort((a, b) => b.price - a.price);\n      }\n\n      // Calculate total pages\n      const totalProducts = response.data.total || products.length;\n      const totalPages = Math.ceil(totalProducts / limit);\n      commit('SET_PRODUCTS', products);\n      commit('SET_TOTAL_PAGES', totalPages);\n      commit('SET_CURRENT_PAGE', page);\n    } catch (error) {\n      commit('SET_ERROR', ERROR_MESSAGES.FETCH_PRODUCTS_ERROR);\n      commit('SET_PRODUCTS', []);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","API_CONFIG","ERROR_MESSAGES","SORT_DIRECTIONS","DEFAULT_VALUES","state","products","loading","error","totalPages","currentPage","DEFAULT_PAGE","itemsPerPage","ITEMS_PER_PAGE","getters","sortedProducts","sort","a","b","price","mutations","SET_PRODUCTS","SET_LOADING","SET_ERROR","SET_TOTAL_PAGES","SET_CURRENT_PAGE","page","actions","fetchProducts","commit","ASC","limit","skip","response","get","BASE_URL","DESC","totalProducts","data","total","length","Math","ceil","FETCH_PRODUCTS_ERROR","namespaced"],"sources":["/Users/sinem.sungur/Downloads/ticimax-case/src/store/modules/products.js"],"sourcesContent":["import axios from 'axios'\nimport { \n  API_CONFIG, \n  ERROR_MESSAGES, \n  SORT_DIRECTIONS, \n  DEFAULT_VALUES \n} from '@/constants/content'\n\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalPages: 0,\n  currentPage: DEFAULT_VALUES.DEFAULT_PAGE,\n  itemsPerPage: DEFAULT_VALUES.ITEMS_PER_PAGE\n}\n\nconst getters = {\n  sortedProducts: (state) => {\n    return [...state.products].sort((a, b) => {\n      return a.price - b.price\n    })\n  }\n}\n\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  },\n  SET_TOTAL_PAGES(state, totalPages) {\n    state.totalPages = totalPages\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page\n  }\n}\n\nconst actions = {\n  async fetchProducts({ commit, state }, { page = DEFAULT_VALUES.DEFAULT_PAGE, sort = SORT_DIRECTIONS.ASC } = {}) {\n    commit('SET_LOADING', true)\n    commit('SET_ERROR', null)\n    \n    try {\n      // Calculate pagination parameters\n      const limit = state.itemsPerPage\n      const skip = (page - 1) * limit\n      \n      // Fetch products from API\n      const response = await axios.get(`${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`)\n      \n      let products = []\n      \n      // Apply sorting\n      if (sort === SORT_DIRECTIONS.ASC) {\n        products.sort((a, b) => a.price - b.price)\n      } else if (sort === SORT_DIRECTIONS.DESC) {\n        products.sort((a, b) => b.price - a.price)\n      }\n      \n      // Calculate total pages\n      const totalProducts = response.data.total || products.length\n      const totalPages = Math.ceil(totalProducts / limit)\n      \n      commit('SET_PRODUCTS', products)\n      commit('SET_TOTAL_PAGES', totalPages)\n      commit('SET_CURRENT_PAGE', page)\n      \n    } catch (error) {\n      commit('SET_ERROR', ERROR_MESSAGES.FETCH_PRODUCTS_ERROR)\n      commit('SET_PRODUCTS', [])\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}