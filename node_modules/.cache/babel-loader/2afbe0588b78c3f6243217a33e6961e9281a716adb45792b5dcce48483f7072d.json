{"ast":null,"code":"import { BUTTON_LABELS, DEFAULT_VALUES } from '@/constants/content';\nexport default {\n  name: 'BaseTable',\n  data() {\n    return {\n      BUTTON_LABELS,\n      DEFAULT_VALUES\n    };\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    tableColumnData: {\n      type: Array,\n      default: () => []\n    },\n    props: {\n      type: String\n    }\n  },\n  methods: {\n    getColStyle(field) {\n      const width = field.width;\n      if (width) return `width: ${width}px; min-width: ${width}px;`;\n      return undefined;\n    },\n    handleUpdateRow(item) {\n      this.$emit('selectedItemAction', item);\n    },\n    handleImageError(event) {\n      // Remove image source to show empty area\n      event.target.style.display = 'none';\n    }\n  }\n};","map":{"version":3,"names":["BUTTON_LABELS","DEFAULT_VALUES","name","data","props","type","Array","default","tableColumnData","String","methods","getColStyle","field","width","undefined","handleUpdateRow","item","$emit","handleImageError","event","target","style","display"],"sources":["src/components/atoms/BaseTable.vue"],"sourcesContent":["<template>\n  <div class=\"table-wrapper\">\n    <div ref=\"tableBody\" class=\"table-main fixed-header\">\n      <table cellspacing=\"0\">\n        <colgroup>\n          <col :style=\"getColStyle(field)\" v-for=\"(field, index) in tableColumnData\" :key=\"index\" />\n        </colgroup>\n        <thead class=\"table-head\">\n          <tr>\n            <th v-for=\"(field, index) in tableColumnData\" :key=\"index\">\n              {{ field.name }}\n            </th>\n          </tr>\n        </thead>\n        <tbody class=\"table-body\">\n          <template v-for=\"(item, index) in data\">\n            <tr :key=\"index\">\n              <td v-for=\"(field, fieldIndex) in tableColumnData\" :key=\"fieldIndex\">\n                <span>\n                  <span\n                    v-if=\"!!field.scopedSlots && field.scopedSlots.customRender === 'colorAction'\"\n                    class=\"color-container\">\n                    {{ item[field.key] }}\n                    <div class=\"rectangle-wrapper\">\n                      <div class=\"rectangle\" :style=\"{ backgroundColor: item[field.key] }\"></div>\n                    </div>\n                  </span>\n                  <div v-else-if=\"!!field.scopedSlots && field.scopedSlots.customRender === 'buttonAction'\">\n                    <span class=\"table-row-button\" @click.stop=\"handleUpdateRow(item)\">{{ BUTTON_LABELS.EDIT }}</span>\n                  </div>\n                  <div v-else-if=\"!!field.scopedSlots && field.scopedSlots.customRender === 'imageAction'\">\n                    <div class=\"image-container\">\n                      <img \n                        :src=\"item[field.key]\" \n                        :alt=\"item.title || DEFAULT_VALUES.PRODUCT_IMAGE_ALT\"\n                        class=\"product-image\"\n                        @error=\"handleImageError\"\n                      />\n                    </div>\n                  </div>\n                  <span v-else> {{ item[field.key] }}</span>\n                </span>\n              </td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BUTTON_LABELS, DEFAULT_VALUES } from '@/constants/content'\n\nexport default {\n  name: 'BaseTable',\n  data() {\n    return {\n      BUTTON_LABELS,\n      DEFAULT_VALUES\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    tableColumnData: {\n      type: Array,\n      default: () => []\n    },\n    props: {\n      type: String\n    }\n  },\n  methods: {\n    getColStyle(field) {\n      const width = field.width\n      if (width) return `width: ${width}px; min-width: ${width}px;`\n      return undefined\n    },\n    handleUpdateRow(item) {\n      this.$emit('selectedItemAction', item)\n    },\n    handleImageError(event) {\n      // Remove image source to show empty area\n      event.target.style.display = 'none'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.table-wrapper {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  min-height: fit-content;\n\n  table {\n    border: 1px solid #dadada;\n    border-radius: 8px 8px 0px 0px;\n    table-layout: fixed;\n    width: 100%;\n    margin: 0 auto;\n  }\n\n  .table-main {\n    border: none;\n    width: 100%;\n    overflow: auto;\n    &.fixed-header {\n      th {\n        position: sticky;\n        top: 0;\n        z-index: 2;\n      }\n    }\n    & .table-head {\n      font-style: normal;\n      font-weight: 500;\n      font-size: 14px;\n      line-height: 17px;\n      width: 100%;\n      white-space: nowrap;\n      position: relative;\n      text-align: left;\n      & tr {\n        & th {\n          background: #f5f5f5;\n          width: fit-content;\n          padding: 21px 16px;\n          font-weight: 600;\n          border-bottom: 1px solid #dadada;\n          &:first-child {\n            border-radius: 8px 0px 0px 0px;\n          }\n          &:last-child {\n            border-radius: 0px 8px 0px 0px;\n          }\n        }\n        & td:not(:nth-last-col) {\n          border-right: 1px solid #dadada;\n        }\n      }\n    }\n    & .table-body {\n      & tr {\n        padding: 16px;\n        position: relative;\n\n        & td:not(:nth-last-col) {\n          border-right: 1px solid #dadada;\n        }\n        &:hover {\n          cursor: pointer;\n        }\n      }\n      .table-row-button {\n        height: fit-content;\n        background-color: rgb(22 28 214 / 61%);\n        width: 100%;\n        padding: 10px 40px;\n        text-align: center;\n        border-radius: 8px;\n        color: white;\n        cursor: pointer;\n        &:hover {\n          background-color: rgb(22 28 214 / 80%);\n        }\n      }\n    }\n    & td {\n      border-bottom: 1px solid #dadada;\n      background: #ffffff;\n      text-align: left;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 14px;\n      color: #484848;\n      line-height: 17px;\n      padding: 16px;\n      vertical-align: middle;\n      & span {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        gap: 5px;\n      }\n      & .color-container {\n        display: flex;\n        flex-direction: column;\n        align-items: start;\n        & .rectangle-wrapper {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 60px;\n          height: 20px;\n          & .rectangle {\n            width: 100%;\n            height: 100%;\n            border: 1px solid;\n            border-radius: 4px;\n          }\n        }\n      }\n      & .image-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100%;\n        height: 80px;\n        & .product-image {\n          max-width: 100%;\n          max-height: 100%;\n          object-fit: contain;\n          border-radius: 4px;\n          border: 1px solid #e0e0e0;\n          background-color: #f9f9f9;\n          transition: transform 0.2s ease;\n          &:hover {\n            transform: scale(1.05);\n          }\n        }\n      }\n    }\n  }\n}\n</style> "],"mappings":"AAoDA,SAAAA,aAAA,EAAAC,cAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAH,aAAA;MACAC;IACA;EACA;EACAG,KAAA;IACAD,IAAA;MACAE,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,eAAA;MACAH,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAH,KAAA;MACAC,IAAA,EAAAI;IACA;EACA;EACAC,OAAA;IACAC,YAAAC,KAAA;MACA,MAAAC,KAAA,GAAAD,KAAA,CAAAC,KAAA;MACA,IAAAA,KAAA,mBAAAA,KAAA,kBAAAA,KAAA;MACA,OAAAC,SAAA;IACA;IACAC,gBAAAC,IAAA;MACA,KAAAC,KAAA,uBAAAD,IAAA;IACA;IACAE,iBAAAC,KAAA;MACA;MACAA,KAAA,CAAAC,MAAA,CAAAC,KAAA,CAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}