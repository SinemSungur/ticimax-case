{"ast":null,"code":"import axios from 'axios';\nimport { API_CONFIG } from '@/constants/content';\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalItems: 0,\n  currentPage: 1,\n  sort: '',\n  itemsPerPage: 12\n};\nconst getters = {\n  sortedProducts: state => [...state.products],\n  totalItems: state => state.totalItems\n};\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  },\n  SET_TOTAL_ITEMS(state, totalItems) {\n    state.totalItems = totalItems;\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page;\n  },\n  SET_SORT(state, sort) {\n    state.sort = sort;\n  }\n};\nconst actions = {\n  async fetchProducts({\n    commit,\n    state\n  }, {\n    page = 1,\n    sort = ''\n  } = {}) {\n    commit('SET_LOADING', true);\n    commit('SET_ERROR', null);\n    try {\n      const limit = state.itemsPerPage;\n      const skip = (page - 1) * limit;\n      let url = `${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`;\n      if (sort) {\n        url += `&sortBy=price&order=${sort}`;\n      }\n      const response = await axios.get(url);\n      const {\n        products,\n        total\n      } = response.data;\n      commit('SET_PRODUCTS', products);\n      commit('SET_TOTAL_ITEMS', total);\n      commit('SET_CURRENT_PAGE', page);\n      commit('SET_SORT', sort);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","API_CONFIG","state","products","loading","error","totalItems","currentPage","sort","itemsPerPage","getters","sortedProducts","mutations","SET_PRODUCTS","SET_LOADING","SET_ERROR","SET_TOTAL_ITEMS","SET_CURRENT_PAGE","page","SET_SORT","actions","fetchProducts","commit","limit","skip","url","BASE_URL","response","get","total","data","message","namespaced"],"sources":["/Users/sinem.sungur/Downloads/ticimax-case/src/store/modules/products.js"],"sourcesContent":["import axios from 'axios'\nimport { API_CONFIG } from '@/constants/content'\n\nconst state = {\n  products: [],\n  loading: false,\n  error: null,\n  totalItems: 0,\n  currentPage: 1,\n  sort: '',\n  itemsPerPage: 12\n}\n\nconst getters = {\n  sortedProducts: state => [...state.products],\n  totalItems: state => state.totalItems\n}\n\nconst mutations = {\n  SET_PRODUCTS(state, products) {\n    state.products = products\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  },\n  SET_TOTAL_ITEMS(state, totalItems) {\n    state.totalItems = totalItems\n  },\n  SET_CURRENT_PAGE(state, page) {\n    state.currentPage = page\n  },\n  SET_SORT(state, sort) {\n    state.sort = sort\n  }\n}\n\nconst actions = {\n  async fetchProducts({ commit, state }, { page = 1, sort = '' } = {}) {\n    commit('SET_LOADING', true)\n    commit('SET_ERROR', null)\n\n    try {\n      const limit = state.itemsPerPage\n      const skip = (page - 1) * limit\n\n      let url = `${API_CONFIG.BASE_URL}?limit=${limit}&skip=${skip}`\n\n      if (sort) {\n        url += `&sortBy=price&order=${sort}`\n      }\n\n      const response = await axios.get(url)\n      const { products, total } = response.data\n\n      commit('SET_PRODUCTS', products)\n      commit('SET_TOTAL_ITEMS', total)\n      commit('SET_CURRENT_PAGE', page)\n      commit('SET_SORT', sort)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,qBAAqB;AAEhD,MAAMC,KAAK,GAAG;EACZC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,CAAC;EACbC,WAAW,EAAE,CAAC;EACdC,IAAI,EAAE,EAAE;EACRC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,cAAc,EAAET,KAAK,IAAI,CAAC,GAAGA,KAAK,CAACC,QAAQ,CAAC;EAC5CG,UAAU,EAAEJ,KAAK,IAAIA,KAAK,CAACI;AAC7B,CAAC;AAED,MAAMM,SAAS,GAAG;EAChBC,YAAYA,CAACX,KAAK,EAAEC,QAAQ,EAAE;IAC5BD,KAAK,CAACC,QAAQ,GAAGA,QAAQ;EAC3B,CAAC;EACDW,WAAWA,CAACZ,KAAK,EAAEE,OAAO,EAAE;IAC1BF,KAAK,CAACE,OAAO,GAAGA,OAAO;EACzB,CAAC;EACDW,SAASA,CAACb,KAAK,EAAEG,KAAK,EAAE;IACtBH,KAAK,CAACG,KAAK,GAAGA,KAAK;EACrB,CAAC;EACDW,eAAeA,CAACd,KAAK,EAAEI,UAAU,EAAE;IACjCJ,KAAK,CAACI,UAAU,GAAGA,UAAU;EAC/B,CAAC;EACDW,gBAAgBA,CAACf,KAAK,EAAEgB,IAAI,EAAE;IAC5BhB,KAAK,CAACK,WAAW,GAAGW,IAAI;EAC1B,CAAC;EACDC,QAAQA,CAACjB,KAAK,EAAEM,IAAI,EAAE;IACpBN,KAAK,CAACM,IAAI,GAAGA,IAAI;EACnB;AACF,CAAC;AAED,MAAMY,OAAO,GAAG;EACd,MAAMC,aAAaA,CAAC;IAAEC,MAAM;IAAEpB;EAAM,CAAC,EAAE;IAAEgB,IAAI,GAAG,CAAC;IAAEV,IAAI,GAAG;EAAG,CAAC,GAAG,CAAC,CAAC,EAAE;IACnEc,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;IAC3BA,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;IAEzB,IAAI;MACF,MAAMC,KAAK,GAAGrB,KAAK,CAACO,YAAY;MAChC,MAAMe,IAAI,GAAG,CAACN,IAAI,GAAG,CAAC,IAAIK,KAAK;MAE/B,IAAIE,GAAG,GAAG,GAAGxB,UAAU,CAACyB,QAAQ,UAAUH,KAAK,SAASC,IAAI,EAAE;MAE9D,IAAIhB,IAAI,EAAE;QACRiB,GAAG,IAAI,uBAAuBjB,IAAI,EAAE;MACtC;MAEA,MAAMmB,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAACH,GAAG,CAAC;MACrC,MAAM;QAAEtB,QAAQ;QAAE0B;MAAM,CAAC,GAAGF,QAAQ,CAACG,IAAI;MAEzCR,MAAM,CAAC,cAAc,EAAEnB,QAAQ,CAAC;MAChCmB,MAAM,CAAC,iBAAiB,EAAEO,KAAK,CAAC;MAChCP,MAAM,CAAC,kBAAkB,EAAEJ,IAAI,CAAC;MAChCI,MAAM,CAAC,UAAU,EAAEd,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdiB,MAAM,CAAC,WAAW,EAAEjB,KAAK,CAAC0B,OAAO,CAAC;IACpC,CAAC,SAAS;MACRT,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;IAC9B;EACF;AACF,CAAC;AAED,eAAe;EACbU,UAAU,EAAE,IAAI;EAChB9B,KAAK;EACLQ,OAAO;EACPE,SAAS;EACTQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}