{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { DEFAULT_VALUES, TABLE_COLUMN_KEYS, SCOPED_SLOT_TYPES } from '@/constants/content';\nimport { TableCell, BaseSpinner } from '@/components';\nimport { getColStyle, handleImageError, truncateText, formatPrice, formatDiscount, formatAvailability, getAvailabilityClass, formatDimensions, formatWeight, getNestedValue, getRatingComment, capitalizeFirstLetter } from '@/utils/tableHelpers';\nexport default {\n  name: 'DataTable',\n  components: {\n    TableCell,\n    BaseSpinner\n  },\n  data() {\n    return {\n      DEFAULT_VALUES,\n      TABLE_COLUMN_KEYS,\n      SCOPED_SLOT_TYPES,\n      loadedImages: 0,\n      totalImages: 0,\n      allImagesLoaded: false\n    };\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    tableColumnData: {\n      type: Array,\n      default: () => []\n    }\n  },\n  methods: {\n    getColStyle,\n    handleImageError,\n    truncateText,\n    formatPrice,\n    formatDiscount,\n    formatAvailability,\n    getAvailabilityClass,\n    formatDimensions,\n    formatWeight,\n    getNestedValue,\n    getRatingComment,\n    capitalizeFirstLetter,\n    getCellType(field) {\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.IMAGE_ACTION) return 'image';\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.DESCRIPTION_ACTION) return 'description';\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.PRICE_ACTION) return 'price';\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.DISCOUNT_ACTION) return 'discount';\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.AVAILABILITY_ACTION) return 'availability';\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.RATING_ACTION) return 'rating';\n      if (field.key === TABLE_COLUMN_KEYS.DIMENSIONS) return 'size';\n      if (field.key === TABLE_COLUMN_KEYS.WEIGHT) return 'weight';\n      if (field.key === TABLE_COLUMN_KEYS.BARCODE) return 'barcode';\n      if (field.key === TABLE_COLUMN_KEYS.CATEGORY) return 'category';\n      return 'default';\n    },\n    getCellValue(item, field) {\n      return getNestedValue(item, field.key);\n    },\n    calculateTotalImages() {\n      this.totalImages = this.data.filter(item => {\n        const imageField = this.tableColumnData.find(field => field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.IMAGE_ACTION);\n        return imageField && getNestedValue(item, imageField.key);\n      }).length;\n\n      // If no images, mark as loaded\n      if (this.totalImages === 0) {\n        this.allImagesLoaded = true;\n        this.$emit('all-images-loaded');\n      }\n    },\n    handleImageLoaded() {\n      this.loadedImages++;\n      if (this.loadedImages >= this.totalImages) {\n        this.allImagesLoaded = true;\n        this.$emit('all-images-loaded');\n      }\n    }\n  },\n  mounted() {\n    this.calculateTotalImages();\n  }\n};","map":{"version":3,"names":["DEFAULT_VALUES","TABLE_COLUMN_KEYS","SCOPED_SLOT_TYPES","TableCell","BaseSpinner","getColStyle","handleImageError","truncateText","formatPrice","formatDiscount","formatAvailability","getAvailabilityClass","formatDimensions","formatWeight","getNestedValue","getRatingComment","capitalizeFirstLetter","name","components","data","loadedImages","totalImages","allImagesLoaded","props","type","Array","default","tableColumnData","methods","getCellType","field","scopedSlots","customRender","IMAGE_ACTION","DESCRIPTION_ACTION","PRICE_ACTION","DISCOUNT_ACTION","AVAILABILITY_ACTION","RATING_ACTION","key","DIMENSIONS","WEIGHT","BARCODE","CATEGORY","getCellValue","item","calculateTotalImages","filter","imageField","find","length","$emit","handleImageLoaded","mounted"],"sources":["src/components/molecules/DataTable.vue"],"sourcesContent":["<template>\n  <div class=\"table-wrapper\">\n    <!-- Loading State -->\n    <div v-if=\"!allImagesLoaded && totalImages > 0\" class=\"table-loading\">\n      <BaseSpinner />\n      <p>Loading images... {{ loadedImages }}/{{ totalImages }}</p>\n    </div>\n    \n    <!-- Table Content -->\n    <div v-else ref=\"tableBody\" class=\"table-main fixed-header\">\n      <table>\n        <colgroup>\n          <col :style=\"getColStyle(field)\" v-for=\"(field, index) in tableColumnData\" :key=\"index\" />\n        </colgroup>\n        <thead class=\"table-head\">\n          <tr>\n            <th v-for=\"(field, index) in tableColumnData\" :key=\"index\">\n              {{ field.name }}\n            </th>\n          </tr>\n        </thead>\n        <tbody class=\"table-body\">\n          <tr v-for=\"(item, index) in data\" :key=\"item.id || index\">\n            <td v-for=\"(field, fieldIndex) in tableColumnData\" :key=\"fieldIndex\">\n              <TableCell \n                :type=\"getCellType(field)\"\n                :value=\"getCellValue(item, field)\"\n                :alt=\"item.title\"\n                :comment=\"getRatingComment(item)\"\n                @image-loaded=\"handleImageLoaded\"\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { \n  DEFAULT_VALUES, \n  TABLE_COLUMN_KEYS,\n  SCOPED_SLOT_TYPES\n} from '@/constants/content'\nimport { TableCell, BaseSpinner } from '@/components'\nimport {\n  getColStyle,\n  handleImageError,\n  truncateText,\n  formatPrice,\n  formatDiscount,\n  formatAvailability,\n  getAvailabilityClass,\n  formatDimensions,\n  formatWeight,\n  getNestedValue,\n  getRatingComment,\n  capitalizeFirstLetter\n} from '@/utils/tableHelpers'\n\nexport default {\n  name: 'DataTable',\n  components: {\n    TableCell,\n    BaseSpinner\n  },\n  data() {\n    return {\n      DEFAULT_VALUES,\n      TABLE_COLUMN_KEYS,\n      SCOPED_SLOT_TYPES,\n      loadedImages: 0,\n      totalImages: 0,\n      allImagesLoaded: false\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    tableColumnData: {\n      type: Array,\n      default: () => []\n    }\n  },\n  methods: {\n    getColStyle,\n    handleImageError,\n    truncateText,\n    formatPrice,\n    formatDiscount,\n    formatAvailability,\n    getAvailabilityClass,\n    formatDimensions,\n    formatWeight,\n    getNestedValue,\n    getRatingComment,\n    capitalizeFirstLetter,\n    getCellType(field) {\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.IMAGE_ACTION) return 'image'\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.DESCRIPTION_ACTION) return 'description'\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.PRICE_ACTION) return 'price'\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.DISCOUNT_ACTION) return 'discount'\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.AVAILABILITY_ACTION) return 'availability'\n      if (field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.RATING_ACTION) return 'rating'\n      if (field.key === TABLE_COLUMN_KEYS.DIMENSIONS) return 'size'\n      if (field.key === TABLE_COLUMN_KEYS.WEIGHT) return 'weight'\n      if (field.key === TABLE_COLUMN_KEYS.BARCODE) return 'barcode'\n      if (field.key === TABLE_COLUMN_KEYS.CATEGORY) return 'category'\n      return 'default'\n    },\n    getCellValue(item, field) {\n      return getNestedValue(item, field.key)\n    },\n    calculateTotalImages() {\n      this.totalImages = this.data.filter(item => {\n        const imageField = this.tableColumnData.find(field => \n          field.scopedSlots?.customRender === SCOPED_SLOT_TYPES.IMAGE_ACTION\n        )\n        return imageField && getNestedValue(item, imageField.key)\n      }).length\n      \n      // If no images, mark as loaded\n      if (this.totalImages === 0) {\n        this.allImagesLoaded = true\n        this.$emit('all-images-loaded')\n      }\n    },\n    handleImageLoaded() {\n      this.loadedImages++\n      if (this.loadedImages >= this.totalImages) {\n        this.allImagesLoaded = true\n        this.$emit('all-images-loaded')\n      }\n    }\n  },\n  mounted() {\n    this.calculateTotalImages()\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.table-wrapper {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  min-height: fit-content;\n\n  .table-loading {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 400px;\n    gap: 16px;\n    \n    p {\n      color: #6c757d;\n      font-size: 14px;\n      margin: 0;\n    }\n  }\n\n  table {\n    border: 1px solid #dadada;\n    border-radius: 8px 8px 0px 0px;\n    table-layout: fixed;\n    width: 100%;\n    margin: 0 auto;\n  }\n\n  .table-main {\n    border: none;\n    width: 100%;\n    overflow: auto;\n    &.fixed-header {\n      th {\n        position: sticky;\n        top: 0;\n        z-index: 2;\n      }\n    }\n    & .table-head {\n      font-style: normal;\n      font-weight: 500;\n      font-size: 14px;\n      line-height: 17px;\n      width: 100%;\n      white-space: nowrap;\n      position: relative;\n      text-align: left;\n      & tr {\n        & th {\n          background: #f5f5f5;\n          width: fit-content;\n          padding: 16px;\n          font-weight: 600;\n          border-bottom: 1px solid #dadada;\n          border-right: 1px solid #dadada;\n          &:first-child {\n            border-radius: 8px 0px 0px 0px;\n          }\n          &:last-child {\n            border-radius: 0px 8px 0px 0px;\n            border-right: none;\n          }\n        }\n      }\n    }\n    & .table-body {\n      & tr {\n        padding: 16px;\n        position: relative;\n\n        & td {\n          border-right: 1px solid #dadada;\n          &:last-child {\n            border-right: none;\n          }\n        }\n        &:hover {\n          cursor: pointer;\n        }\n      }\n    }\n    & td {\n      border-bottom: 1px solid #dadada;\n      background: #ffffff;\n      text-align: left;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 14px;\n      color: #484848;\n      line-height: 17px;\n      padding: 16px;\n      vertical-align: middle;\n    }\n  }\n}\n</style> "],"mappings":";;;AAwCA,SACAA,cAAA,EACAC,iBAAA,EACAC,iBAAA,QACA;AACA,SAAAC,SAAA,EAAAC,WAAA;AACA,SACAC,WAAA,EACAC,gBAAA,EACAC,YAAA,EACAC,WAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,oBAAA,EACAC,gBAAA,EACAC,YAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,qBAAA,QACA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAf,SAAA;IACAC;EACA;EACAe,KAAA;IACA;MACAnB,cAAA;MACAC,iBAAA;MACAC,iBAAA;MACAkB,YAAA;MACAC,WAAA;MACAC,eAAA;IACA;EACA;EACAC,KAAA;IACAJ,IAAA;MACAK,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,eAAA;MACAH,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAE,OAAA;IACAvB,WAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,WAAA;IACAC,cAAA;IACAC,kBAAA;IACAC,oBAAA;IACAC,gBAAA;IACAC,YAAA;IACAC,cAAA;IACAC,gBAAA;IACAC,qBAAA;IACAa,YAAAC,KAAA;MACA,IAAAA,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAA+B,YAAA;MACA,IAAAH,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAAgC,kBAAA;MACA,IAAAJ,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAAiC,YAAA;MACA,IAAAL,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAAkC,eAAA;MACA,IAAAN,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAAmC,mBAAA;MACA,IAAAP,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAAoC,aAAA;MACA,IAAAR,KAAA,CAAAS,GAAA,KAAAtC,iBAAA,CAAAuC,UAAA;MACA,IAAAV,KAAA,CAAAS,GAAA,KAAAtC,iBAAA,CAAAwC,MAAA;MACA,IAAAX,KAAA,CAAAS,GAAA,KAAAtC,iBAAA,CAAAyC,OAAA;MACA,IAAAZ,KAAA,CAAAS,GAAA,KAAAtC,iBAAA,CAAA0C,QAAA;MACA;IACA;IACAC,aAAAC,IAAA,EAAAf,KAAA;MACA,OAAAhB,cAAA,CAAA+B,IAAA,EAAAf,KAAA,CAAAS,GAAA;IACA;IACAO,qBAAA;MACA,KAAAzB,WAAA,QAAAF,IAAA,CAAA4B,MAAA,CAAAF,IAAA;QACA,MAAAG,UAAA,QAAArB,eAAA,CAAAsB,IAAA,CAAAnB,KAAA,IACAA,KAAA,CAAAC,WAAA,EAAAC,YAAA,KAAA9B,iBAAA,CAAA+B,YACA;QACA,OAAAe,UAAA,IAAAlC,cAAA,CAAA+B,IAAA,EAAAG,UAAA,CAAAT,GAAA;MACA,GAAAW,MAAA;;MAEA;MACA,SAAA7B,WAAA;QACA,KAAAC,eAAA;QACA,KAAA6B,KAAA;MACA;IACA;IACAC,kBAAA;MACA,KAAAhC,YAAA;MACA,SAAAA,YAAA,SAAAC,WAAA;QACA,KAAAC,eAAA;QACA,KAAA6B,KAAA;MACA;IACA;EACA;EACAE,QAAA;IACA,KAAAP,oBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}