{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport BaseSpinner from './BaseSpinner.vue';\nexport default {\n  name: 'BaseImage',\n  components: {\n    BaseSpinner\n  },\n  props: {\n    src: {\n      type: String,\n      required: true\n    },\n    alt: {\n      type: String,\n      default: ''\n    },\n    lazy: {\n      type: Boolean,\n      default: true\n    },\n    aspectRatio: {\n      type: String,\n      default: '16/9'\n    }\n  },\n  data() {\n    return {\n      isLoaded: false,\n      hasError: false,\n      observer: null\n    };\n  },\n  computed: {\n    imageClasses() {\n      return ['base-image', {\n        'base-image--loaded': this.isLoaded\n      }, {\n        'base-image--error': this.hasError\n      }];\n    },\n    imgClasses() {\n      return 'base-image__img';\n    }\n  },\n  mounted() {\n    if (this.lazy && 'IntersectionObserver' in window) {\n      this.setupLazyLoading();\n    } else {\n      this.loadImage();\n    }\n  },\n  beforeDestroy() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  },\n  methods: {\n    setupLazyLoading() {\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            this.loadImage();\n            this.observer.disconnect();\n          }\n        });\n      }, {\n        rootMargin: '50px 0px',\n        threshold: 0.01\n      });\n      this.observer.observe(this.$el);\n    },\n    loadImage() {\n      // Simple image loading without cache\n      const img = new Image();\n      img.onload = () => {\n        this.isLoaded = true;\n        this.hasError = false;\n        this.$emit('image-loaded');\n      };\n      img.onerror = () => {\n        this.hasError = true;\n        this.$emit('image-error');\n      };\n      img.src = this.src;\n    },\n    handleLoad() {\n      this.isLoaded = true;\n      this.hasError = false;\n      this.$emit('image-loaded');\n    },\n    handleError() {\n      this.hasError = true;\n      this.$emit('image-error');\n    }\n  }\n};","map":{"version":3,"names":["BaseSpinner","name","components","props","src","type","String","required","alt","default","lazy","Boolean","aspectRatio","data","isLoaded","hasError","observer","computed","imageClasses","imgClasses","mounted","window","setupLazyLoading","loadImage","beforeDestroy","disconnect","methods","IntersectionObserver","entries","forEach","entry","isIntersecting","rootMargin","threshold","observe","$el","img","Image","onload","$emit","onerror","handleLoad","handleError"],"sources":["src/components/atoms/BaseImage.vue"],"sourcesContent":["<template>\n  <div class=\"base-image\" :class=\"imageClasses\">\n    <img \n      v-if=\"isLoaded\"\n      :src=\"src\" \n      :alt=\"alt\"\n      :class=\"imgClasses\"\n      @load=\"handleLoad\"\n      @error=\"handleError\"\n    />\n    <div v-else class=\"base-image__placeholder\">\n      <BaseSpinner v-if=\"!hasError\" />\n      <div v-else class=\"base-image__error\">\n        <span>Image failed to load</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport BaseSpinner from './BaseSpinner.vue'\n\nexport default {\n  name: 'BaseImage',\n  components: {\n    BaseSpinner\n  },\n  props: {\n    src: {\n      type: String,\n      required: true\n    },\n    alt: {\n      type: String,\n      default: ''\n    },\n    lazy: {\n      type: Boolean,\n      default: true\n    },\n    aspectRatio: {\n      type: String,\n      default: '16/9'\n    }\n  },\n  data() {\n    return {\n      isLoaded: false,\n      hasError: false,\n      observer: null\n    }\n  },\n  computed: {\n    imageClasses() {\n      return [\n        'base-image',\n        { 'base-image--loaded': this.isLoaded },\n        { 'base-image--error': this.hasError }\n      ]\n    },\n    imgClasses() {\n      return 'base-image__img'\n    }\n  },\n  mounted() {\n    if (this.lazy && 'IntersectionObserver' in window) {\n      this.setupLazyLoading()\n    } else {\n      this.loadImage()\n    }\n  },\n  beforeDestroy() {\n    if (this.observer) {\n      this.observer.disconnect()\n    }\n  },\n  methods: {\n    setupLazyLoading() {\n      this.observer = new IntersectionObserver(\n        (entries) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              this.loadImage()\n              this.observer.disconnect()\n            }\n          })\n        },\n        {\n          rootMargin: '50px 0px',\n          threshold: 0.01\n        }\n      )\n      \n      this.observer.observe(this.$el)\n    },\n    loadImage() {\n      // Simple image loading without cache\n      const img = new Image()\n      img.onload = () => {\n        this.isLoaded = true\n        this.hasError = false\n        this.$emit('image-loaded')\n      }\n      img.onerror = () => {\n        this.hasError = true\n        this.$emit('image-error')\n      }\n      img.src = this.src\n    },\n    handleLoad() {\n      this.isLoaded = true\n      this.hasError = false\n      this.$emit('image-loaded')\n    },\n    handleError() {\n      this.hasError = true\n      this.$emit('image-error')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.base-image {\n  position: relative;\n  width: 100%;\n  background-color: #f8f9fa;\n  overflow: hidden;\n  \n  &__placeholder {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 200px;\n    background-color: #f8f9fa;\n  }\n  \n  &__img {\n    width: 100%;\n    height: 100%;\n    object-fit: contain;\n    transition: opacity 0.3s ease;\n  }\n  \n  &__error {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    color: #6c757d;\n    font-size: 14px;\n  }\n  \n  &--loaded {\n    .base-image__img {\n      opacity: 1;\n    }\n  }\n}\n</style> "],"mappings":";;AAoBA,OAAAA,WAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACAC,GAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,GAAA;MACAH,IAAA,EAAAC,MAAA;MACAG,OAAA;IACA;IACAC,IAAA;MACAL,IAAA,EAAAM,OAAA;MACAF,OAAA;IACA;IACAG,WAAA;MACAP,IAAA,EAAAC,MAAA;MACAG,OAAA;IACA;EACA;EACAI,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA;MACA,QACA,cACA;QAAA,2BAAAJ;MAAA,GACA;QAAA,0BAAAC;MAAA,EACA;IACA;IACAI,WAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,SAAAV,IAAA,8BAAAW,MAAA;MACA,KAAAC,gBAAA;IACA;MACA,KAAAC,SAAA;IACA;EACA;EACAC,cAAA;IACA,SAAAR,QAAA;MACA,KAAAA,QAAA,CAAAS,UAAA;IACA;EACA;EACAC,OAAA;IACAJ,iBAAA;MACA,KAAAN,QAAA,OAAAW,oBAAA,CACAC,OAAA;QACAA,OAAA,CAAAC,OAAA,CAAAC,KAAA;UACA,IAAAA,KAAA,CAAAC,cAAA;YACA,KAAAR,SAAA;YACA,KAAAP,QAAA,CAAAS,UAAA;UACA;QACA;MACA,GACA;QACAO,UAAA;QACAC,SAAA;MACA,CACA;MAEA,KAAAjB,QAAA,CAAAkB,OAAA,MAAAC,GAAA;IACA;IACAZ,UAAA;MACA;MACA,MAAAa,GAAA,OAAAC,KAAA;MACAD,GAAA,CAAAE,MAAA;QACA,KAAAxB,QAAA;QACA,KAAAC,QAAA;QACA,KAAAwB,KAAA;MACA;MACAH,GAAA,CAAAI,OAAA;QACA,KAAAzB,QAAA;QACA,KAAAwB,KAAA;MACA;MACAH,GAAA,CAAAhC,GAAA,QAAAA,GAAA;IACA;IACAqC,WAAA;MACA,KAAA3B,QAAA;MACA,KAAAC,QAAA;MACA,KAAAwB,KAAA;IACA;IACAG,YAAA;MACA,KAAA3B,QAAA;MACA,KAAAwB,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}